-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Royalties where

type RoyaltiesId = ContractId Royalties

template Royalties
  with
    provider : Party
    owner : Party
    ratio : Decimal
    amount : Decimal

  where
    ensure amount > 0.0

    controller owner can

      -- Split the Royalties by dividing the amount.
      Royalties_Split : (RoyaltiesId, RoyaltiesId)
         with
          splitAmount: Decimal
        do
          let restAmount = amount - splitAmount
          splitCid <- create this with amount = splitAmount
          restCid <- create this with amount = restAmount
          return (splitCid, restCid)

      Royalties_Transfer : RoyaltiesId
        with
          newOwner : Party
        do create RoyaltiesTransfer with royalties = this; newOwner

      {-- Merge two IOUs by aggregating their amounts.
      Iou_Merge : IouId
        with
          otherCid: IouId
        do
          otherIou <- fetch otherCid
          -- Check the two IOU's are compatible
          assert (
            currency == otherIou.currency &&
            owner == otherIou.owner &&
            issuer == otherIou.issuer
            )
          -- Retire the old Iou
          archive otherCid
          -- Return the merged Iou      Iou_Transfer : ContractId IouTransfer
        with
          newOwner : Party
        do create IouTransfer with iou = this; newOwner
          create this with amount = amount + otherIou.amount
          --}

template RoyaltiesTransfer
  with
    royalties : Royalties
    newOwner : Party
  where
    signatory royalties.provider, royalties.owner

    controller newOwner can
      RoyaltiesTransfer_Accept : RoyaltiesId
        do 
        create royalties with
          owner = newOwner
      
      RoyaltiesTransfer_Reject : RoyaltiesId
        do create royalties
